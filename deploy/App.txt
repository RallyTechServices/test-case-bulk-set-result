<!DOCTYPE html>
<html>
<head>
    <title>TS Test Case Bulk Result</title>
    <!--  (c) 2015,2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Apr 07 2016 10:28:17 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Apr 07 2016 10:28:17 GMT-0700 (PDT)";
        var CHECKSUM = 7469356835;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

var getHiddenFieldConfig = function (name) {
    return {
        name: name,
        xtype: 'rallytextfield',
        hidden: true,
        handlesEvents: {
            typeselected: function (type) {
                this.setValue(null);
            }
        }
    };
};

Ext.define('Rally.apps.customlist.Settings', {
    singleton: true,
    requires: [
        'Rally.ui.combobox.FieldComboBox',
        'Rally.ui.combobox.ComboBox',
        'Rally.ui.CheckboxField'
    ],

    getFields: function (app) {
        this.app = app;
        return [
//            {
//                name: 'type',
//                xtype: 'rallycombobox',
//                allowBlank: false,
//                autoSelect: false,
//                shouldRespondToScopeChange: true,
//                context: this.app.getContext(),
//                initialValue: 'HierarchicalRequirement',
//                storeConfig: {
//                    model: Ext.identityFn('TypeDefinition'),
//                    sorters: [{ property: 'DisplayName' }],
//                    fetch: ['DisplayName', 'ElementName', 'TypePath', 'Parent', 'UserListable'],
//                    filters: [{ property: 'UserListable', value: true }],
//                    autoLoad: false,
//                    remoteSort: false,
//                    remoteFilter: true
//                },
//                displayField: 'DisplayName',
//                valueField: 'TypePath',
//                listeners: {
//                    select: function (combo) {
//                        this.app.clearFiltersAndSharedViews();
//                        combo.fireEvent('typeselected', combo.getRecord().get('TypePath'), combo.context);
//                    },
//                    scope: this
//                },
//                bubbleEvents: ['typeselected'],
//                readyEvent: 'ready',
//                handlesEvents: {
//                    projectscopechanged: function (context) {
//                        this.refreshWithNewContext(context);
//                    }
//                }
//            },
            { type: 'query' },
            {
                name: 'showControls',
                xtype: 'rallycheckboxfield',
                fieldLabel: 'Show Control Bar'
            },
            getHiddenFieldConfig('columnNames'),
            getHiddenFieldConfig('order')
        ];
    }
});
Ext.define('CA.techservices.bulk.BulkVerdictMenuItem',{
    extend: 'Rally.ui.menu.item.RecordMenuItem',
    alias: 'widget.tsbulkverdictmenuitem',
    
    config: {
        text: 'Add Verdict...', 
        handler: function() {
            this._launchVerdictDialog();
        },
            
        predicate: function(record) {
            return true;
        }
    },
    
    _launchVerdictDialog: function() {
        var records = this.records || [this.record];
        
        if ( records.length > 0 ) {
            Deft.Chain.pipeline([
                this._getTCRModel,
                this._getRequiredFields,
                this._launchDialog
            ],this).then({
                scope: this,
                success: function(dialog){
                    
                },
                failure: function(msg) {
                    Ext.Msg.alert('',msg);
                }
            });
            
        }
    },
    
    _launchDialog: function(fields) {
        var dialog = Ext.create('CA.techservices.dialog.VerdictDialog',{
            autoShow: true,
            maxHeight: Rally.getApp().getHeight() - 25,
            maxWidth: Rally.getApp().getWidth() - 50,
            fields: fields,
            listeners: {
                scope: this,
                valueschosen: function(dialog,values){
                    this._setResults(values);
                }
            }
        });
        
        return dialog;
    },
    
    _getTCRModel: function() {
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.ModelFactory.getModel({
            type: 'TestCaseResult',
            scope: this,
            success: function(model) {
                this.tcr_model = model;
                deferred.resolve(model);
            }
        });
        return deferred.promise;
    },
    
    _getRequiredFields: function(model) {
        var blacklist = ['TestCase'];
        return Ext.Array.filter(model.getFields(), function(field){
            if ( field.hidden ) {
                return false;
            }
            
            if ( Ext.Array.contains(blacklist, field.name) ) {
                return false;
            }
            
            return ( field.required && !field.readOnly );
        });
    },
    
    _setResults: function(values) {
        var me = this;
        
        var promises =  Ext.Array.map(this.records, function(record){
            return function() {
                return me._setResult(values, record);
            };
        });
        
        Rally.getApp().setLoading('Saving verdicts...');
        Deft.Chain.sequence(promises).then({
            success: function() {
                Rally.getApp().setLoading(false);
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem saving verdicts', msg);
                Rally.getApp().setLoading(false);
            }
        });
    },
    
    _setResult: function(values, testcase) {
        var deferred = Ext.create('Deft.Deferred');
        var tcr_model = this.tcr_model;
        values.TestCase = testcase.get('_ref');
        var tcr = Ext.create(tcr_model, values);
        tcr.save({
            callback: function(result, operation, success) {
                if ( success ) {
                    testcase.save();  // force reload in grid
                    deferred.resolve(result);
                } else {
                    deferred.reject(operation.Error && operation.Error.Errors.join(' '));
                }
            }
        });
        return deferred.promise;
    }
});

Ext.define('CA.techservices.dialog.VerdictDialog', {
    
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsverdictdialog',
    
    height: 400,
    width: 600,
    closable: true,
    draggable: true,

    config: {
        /**
         * @cfg {String}
         * Title to give to the dialog
         */
        title: 'Set Required Verdict Information',
        /**
         * @cfg [{Rally.data.wsapi.Field}] (required)
         * List of required field objects
         */
        fields: [],
        
        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Save'
    },

    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },


    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event valueschosen
             * Fires when user clicks done after choosing an artifact
             * @param {CA.techservices.dialog.VerdictDialog} source the dialog
             * @param {Object} field values
             */
            'valueschosen'
        );
    },

    destroy: function() {
        this.callParent(arguments);
    },

    beforeRender: function() {
        this.callParent(arguments);

        this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    itemId: 'doneButton',
                    text: this.selectionButtonText,
                    cls: 'primary rly-small',
                    scope: this,
                    disabled: true,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        this.fireEvent('valueschosen', this, this.getValues());
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary rly-small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

        if (this.introText) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                html: this.introText
            });
        }

        this.buildForm(this.fields);

    },

    getValues: function() {
        var values = this.form.getForm().getFieldValues();
        
        Ext.Object.each(values, function(key,value) {
            if ( Ext.isDate(value) ) {
                values[key] = Rally.util.DateTime.toIsoString(value);
            }
        });
        return values;
    },

    buildForm: function(fields) {
        var me = this;
        if (this.form) {
            this.form.destroy();
        }
        
        var items = Ext.Array.map(fields, function(field){

            var config = {
                name: field.name,
                fieldLabel: field.displayName,
                allowBlank: false,
                xtype: 'rallytextfield',
                listeners: {
                    scope: this,
                    change: function() {
                        me._checkValidity(field);
                    }
                }
            };
            
            var editor = field.editor;
            if ( editor ) {
                if ( editor.field ) {
                    editor = { 
                        xtype: editor.field.xtype,
                        field: field.name,
                        model: 'TestCaseResult'
                    };
                }
                config = Ext.Object.merge(config, editor);
            }
            
            return config;
        });
        
        this.form = Ext.create('Ext.form.Panel', {
            bodyPadding: 5,

            // Fields will be arranged vertically, stretched to full width
            layout: 'anchor',
            defaults: {
                anchor: '100%'
            },

            // The fields
            defaultType: 'rallytextfield',
            items: items
        });

        this.add(this.form);
    },
    
    _checkValidity: function() {
        // form not recognizing rally fields
        var valid = true;
        var values = this.getValues();
        
        Ext.Object.each(values, function(key,value){
            if ( Ext.isEmpty(value) ) {
                valid = false;
            }
        });
        
        if ( valid ) {
            this.down('#doneButton').setDisabled(false);
        } else {
            this.down('#doneButton').setDisabled(true);
        }
    }
});
Ext.define("TSTestCaseBulkResult", {
    extend: 'Rally.app.GridBoardApp',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    modelNames: ['TestCase'],
    statePrefix: 'ts-tcbr-customlist',

    disallowedAddNewTypes: ['user', 'userprofile', 'useriterationcapacity', 'testcaseresult', 'task', 'scmrepository', 'project', 'changeset', 'change', 'builddefinition', 'build', 'program'],
    orderedAllowedPageSizes: [10, 25, 50, 100, 200],
    allowExpansionStateToBeSaved: false,
    isEditable: true,

    config: {
        defaultSettings: {
            showControls: true,
            type: 'TestCase',
            columnNames: ['FormattedID','Name']
        }
    },

    getFieldPickerConfig: function () {
        var config = this.callParent(arguments);
        config.gridFieldBlackList = _.union(config.gridFieldBlackList, [
            'Artifacts',
            'CreationDate',
            'Projects',
            'VersionId'
        ]);
        return _.merge(config, {
            gridAlwaysSelectedValues: ['FormattedID', 'Name']
        });
    },

    getFilterControlConfig: function() {
        return {
           blackListFields: ['Project','LastResult','ObjectUUID','WorkProduct']
        };
    }, 
    
    getGridConfig: function(options) {
        return {
            xtype: 'rallytreegrid',
            alwaysShowDefaultColumns: false,
            columnCfgs: this.getColumnCfgs(),
            enableBulkEdit: true,
            enableRanking: Rally.data.ModelTypes.areArtifacts(this.modelNames),
            expandAllInColumnHeaderEnabled: true,
            plugins: this.getGridPlugins(),
            stateId: this.getScopedStateId('grid'),
            stateful: true,
            store: options && options.gridStore,
            storeConfig: {
                filters: this.getPermanentFilters()
            },
            summaryColumns: [],
            listeners: {
                afterrender: this.publishComponentReady,
                storeload: {
                    fn: function () {
                        this.fireEvent('contentupdated', this);
                    },
                    single: true
                },
                scope: this
            },
            bulkEditConfig: {
                items:  [{ xtype: 'tsbulkverdictmenuitem' }]
            }
        };
    },
    
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    getPermanentFilters: function() {

        if ( Ext.isEmpty(this.getSetting('query') ) ) {
            return [];
        }
        return Rally.data.wsapi.Filter.fromQueryString( this.getSetting('query') );
    },
    
    getSettingsFields: function() {
        return Rally.apps.customlist.Settings.getFields(this);
    },

    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('TSTestCaseBulkResult', {
                   name: 'TS Test Case Bulk Result'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>